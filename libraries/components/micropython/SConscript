import rtconfig
from building import *

group = []

# get current directory
cwd     = GetCurrentDir()
# The set of source files associated with this SConscript file.
src     = Glob('py/*.c')

share_src   = Glob('shared/runtime/*.c')
share_src   += Glob('shared/runtime/gchelper_thumb2.s')
share_src   += Glob('shared/runtime/gchelper_generic.c')
share_src   += Glob('shared/timeutils/timeutils.c')
share_src   += Glob('shared/readline/*.c')

extmod_src  = Glob('extmod/moductypes.c')
extmod_src  += Glob('extmod/modbinascii.c')
extmod_src  += Glob('extmod/modcryptolib.c')
extmod_src  += Glob('extmod/os_dupterm.c')
extmod_src  += Glob('extmod/modheapq.c')
extmod_src  += Glob('extmod/modhashlib.c')
extmod_src  += Glob('extmod/modtime.c')
extmod_src  += Glob('extmod/modjson.c')
extmod_src  += Glob('extmod/modos.c')
extmod_src  += Glob('extmod/modplatform.c')
extmod_src  += Glob('extmod/modrandom.c')
extmod_src  += Glob('extmod/modre.c')
extmod_src  += Glob('extmod/modselect.c')
extmod_src  += Glob('extmod/modasyncio.c')
extmod_src  += Glob('extmod/moddeflate.c')
extmod_src  += Glob('extmod/machine_mem.c')
extmod_src  += Glob('extmod/machine_pulse.c')
extmod_src  += Glob('extmod/uos_dupterm.c')
# extmod_src  += Glob('extmod/vfs.c')
# extmod_src  += Glob('extmod/vfs_reader.c')
# extmod_src  += Glob('extmod/vfs_posix.c')
# extmod_src  += Glob('extmod/vfs_posix_file.c')

SrcRemove(share_src, ['shared/runtime/gchelper_generic.c'])
SrcRemove(share_src, ['shared/runtime/softtimer.c'])
SrcRemove(src, ['py/modthread.c'])

path    = [cwd]
path   += [cwd + '/py']
path   += [cwd + '/shared/runtime']
path   += [cwd + '/shared/timeutils']
path   += [cwd + '/shared/readline']
path   += [cwd + '/extmod']
path   += [cwd + '/lib/uzlib']

LOCAL_CCFLAGS = ''
CPPDEFINES = ['MICROPY_PY_SENSOR=1']
CPPDEFINES += ['NDEBUG']

if rtconfig.PLATFORM in ['gcc', 'armclang'] :
    LOCAL_CCFLAGS += ' -std=gnu99'
elif rtconfig.PLATFORM == 'armcc':
    LOCAL_CCFLAGS += ' --c99 --gnu'

group = group + DefineGroup('micropython/share', share_src, depend = [''])
group = group + DefineGroup('micropython/extmod', extmod_src, depend = [''])
group = group + DefineGroup('micropython', src, depend = [''], CPPPATH = path, LOCAL_CCFLAGS = LOCAL_CCFLAGS, CPPDEFINES=CPPDEFINES)

Return('group')
