import os
from building import *
import rtconfig

group = []

# get current directory
cwd     = GetCurrentDir()
imlib_src = Glob('src/omv/imlib/*.c')
alloc_src = Glob('src/omv/alloc/*.c')
common_src = Glob('src/omv/common/*.c')
modules_src = Glob('src/omv/modules/*.c')
tf_src = []

dsp_src = Glob('src/hal/cmsis/src/dsp/CommonTables/CommonTables.c')
dsp_src += Glob('src/hal/cmsis/src/dsp/FastMathFunctions/FastMathFunctions.c')
dsp_src += Glob('src/hal/cmsis/src/dsp/BasicMathFunctions/BasicMathFunctions.c')

ulab_src = Glob('src/omv/modules/ulab/code/*.c')
ulab_src += Glob('src/omv/modules/ulab/code/numpy/*.c')
ulab_src += Glob('src/omv/modules/ulab/code/numpy/carray/*.c')
ulab_src += Glob('src/omv/modules/ulab/code/numpy/fft/*.c')
ulab_src += Glob('src/omv/modules/ulab/code/numpy/linalg/*.c')
ulab_src += Glob('src/omv/modules/ulab/code/numpy/ndarray/*.c')
ulab_src += Glob('src/omv/modules/ulab/code/numpy//random/*.c')
ulab_src += Glob('src/omv/modules/ulab/code/numpy/io/*.c')
ulab_src += Glob('src/omv/modules/ulab/code/user/*.c')
ulab_src += Glob('src/omv/modules/ulab/code/utils/*.c')

ulab_scipy_src = Glob('src/omv/modules/ulab/code/scipy/*.c')
ulab_scipy_src += Glob('src/omv/modules/ulab/code/scipy/linalg/*.c')
ulab_scipy_src += Glob('src/omv/modules/ulab/code/scipy/optimize/*.c')
ulab_scipy_src += Glob('src/omv/modules/ulab/code/scipy/signal/*.c')
ulab_scipy_src += Glob('src/omv/modules/ulab/code/scipy/special/*.c')

port_src = Glob('src/omv/ports/ra8/*.c')
sensor_src = Glob('src/omv/sensors/*.c')

SrcRemove(common_src, ['src/omv/common/ini.c'])
SrcRemove(common_src, ['src/omv/common/ff_wrapper.c'])
SrcRemove(common_src, ['src/omv/common/pendsv.c'])
SrcRemove(common_src, ['src/omv/common/file_utils.c'])
SrcRemove(common_src, ['src/omv/common/usbdbg.c'])
SrcRemove(common_src, ['src/omv/common/tinyusb_debug.c'])

SrcRemove(alloc_src, ['src/omv/alloc/fb_alloc.c'])

SrcRemove(imlib_src, ['src/omv/imlib/framebuffer.c'])

SrcRemove(modules_src, ['src/omv/modules/examplemodule.c'])
SrcRemove(modules_src, ['src/omv/modules/py_display_data.c'])
SrcRemove(modules_src, ['src/omv/modules/py_fir_lepton.c'])
SrcRemove(modules_src, ['src/omv/modules/py_ft5x06.c'])
SrcRemove(modules_src, ['src/omv/modules/py_tfp410.c'])
SrcRemove(modules_src, ['src/omv/modules/py_tof.c'])
SrcRemove(modules_src, ['src/omv/modules/py_tv.c'])

if GetDepend(['OMV_ENABLE_TF']):
    tf_src += Glob('src/lib/tflm/tflm_backend.cpp')

path = [cwd + '/']
path += [cwd + '/src/hal']
path += [cwd + '/src/hal/cmsis/include']
path += [cwd + '/src/hal/cmsis/include/dsp']
path += [cwd + '/src/lib/libtf']
path += [cwd + '/src/omv']
path += [cwd + '/src/omv/alloc']
path += [cwd + '/src/omv/common']
path += [cwd + '/src/omv/imlib']
path += [cwd + '/src/omv/ports/ra8']
path += [cwd + '/src/omv/sensors']
path += [cwd + '/src/omv/boards/RA8']
path += [cwd + '/src/omv/modules']
path += [cwd + '/src/omv/modules/ulab/code']
path += [cwd + '/src/omv/modules/ulab/code/numpy']
path += [cwd + '/src/omv/modules/ulab/code/numpy/carray']
path += [cwd + '/src/omv/modules/ulab/code/numpy/fft']
path += [cwd + '/src/omv/modules/ulab/code/numpy/linalg']
path += [cwd + '/src/omv/modules/ulab/code/numpy/ndarray']
path += [cwd + '/src/omv/modules/ulab/code/numpy/io']
path += [cwd + '/src/omv/modules/ulab/code/numpy/random']
path += [cwd + '/src/omv/modules/ulab/code/scipy/linalg']
path += [cwd + '/src/omv/modules/ulab/code/scipy/optimize']
path += [cwd + '/src/omv/modules/ulab/code/scipy/signal']
path += [cwd + '/src/omv/modules/ulab/code/scipy/special']
path += [cwd + '/src/omv/modules/ulab/code/user']
path += [cwd + '/src/omv/modules/ulab/code/utils']

LOCAL_CCFLAGS = ''

if rtconfig.PLATFORM in ['gcc', 'armclang']:
    LOCAL_CCFLAGS += ' -std=gnu99'
elif rtconfig.PLATFORM == 'armcc':
    LOCAL_CCFLAGS += ' --c99 --gnu'

# Extra module flags.
CPPFLAGS = '-std=c++11'
CPPFLAGS += '-fno-rtti'
CPPFLAGS += '-fno-exceptions'
CPPFLAGS += '-fno-use-cxa-atexit'
CPPFLAGS += '-nodefaultlibs'
CPPFLAGS += '-fno-unwind-tables'
CPPFLAGS += '-fpermissive'
CPPFLAGS += '-fmessage-length=0'
CPPFLAGS += '-fno-threadsafe-statics'
CPPFLAGS += '-Wno-double-promotion'
CPPFLAGS += '-Wno-float-conversion'
CPPFLAGS += '-DTF_LITE_STATIC_MEMORY'
CPPFLAGS += '-DTF_LITE_DISABLE_X86_NEON'
CPPFLAGS += '-DKERNELS_OPTIMIZED_FOR_SPEED'
CPPFLAGS += '-DTF_LITE_STRIP_ERROR_STRINGS'

CFLAGS = ' -DOMV_DEBUG_PRINTF'
CFLAGS += ' -DFB_ALLOC_STATS'
CFLAGS += ' -DOMV_PROFILE_ENABLE=1'

rtconfig.CXXFLAGS.replace('-std=gnu99', "")

if rtconfig.CROSS_TOOL == 'gcc':
    LIBS = ['tflm-cortex-m7+fp-release']     
    LIBPATH = [os.path.join(GetCurrentDir(), 'src/lib/tflm/libtflm/lib')] 

path += [cwd + '/src/lib/tflm/libtflm/include/']
path += [cwd + '/src/lib/tflm/libtflm/include/third_party/']
path += [cwd + '/src/lib/tflm/libtflm/include/third_party/gemmlowp/']
path += [cwd + '/src/lib/tflm/libtflm/include/third_party/flatbuffers/include/']

group = group + DefineGroup('openmv/alloc', alloc_src, depend = ['BSP_USING_OPENMV'])
group = group + DefineGroup('openmv/common', common_src, depend = ['BSP_USING_OPENMV'])
group = group + DefineGroup('openmv/modules', modules_src, depend = ['BSP_USING_OPENMV'])
group = group + DefineGroup('openmv/dsp', dsp_src, depend = ['BSP_USING_OPENMV'])
group = group + DefineGroup('openmv/ulab', ulab_src, depend = ['BSP_USING_OPENMV'])
group = group + DefineGroup('openmv/ulab/scipy', ulab_scipy_src, depend = ['BSP_USING_OPENMV'])
group = group + DefineGroup('openmv/port/ra8', port_src, depend = ['BSP_USING_OPENMV'])
group = group + DefineGroup('openmv/sensor', sensor_src, depend = ['BSP_USING_OPENMV'])
group = group + DefineGroup('openmv/tf', tf_src, depend = ['BSP_USING_OPENMV', 'OMV_ENABLE_TF'])
group = group + DefineGroup('openmv/imlib', imlib_src, depend = ['BSP_USING_OPENMV'],
                            LOCAL_CCFLAGS = LOCAL_CCFLAGS,
                            CPPPATH = path,
                            CFLAGS = CFLAGS,
                            CXXFLAGS = CPPFLAGS,
                            LIBS = LIBS,
                            LIBPATH = LIBPATH)

Return('group')
 